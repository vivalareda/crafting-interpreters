<repomix>This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-17T21:28:42.264Z<directory_structure>src/
  index.ts
  scanner.ts
  token.ts
.gitignore
bun.lock
package.json
README.md
tsconfig.json</directory_structure><files>This section contains the contents of the repository&apos;s files.<file path="src/index.ts">import * as fs from &apos;fs&apos;;
import * as readline from &quot;readline&quot;;


class Lox {
  public hadError: boolean = false;

  main(args: string[]) {
    if (args.length &gt; 1) {
      console.log(&quot;Usage: jlox [script]&quot;);
      process.exit(64);
    } else if (args.length === 0) {
      this.runFile(args[0]);
    } else {
      this.runPrompt();
    }
  }

  private runFile(path: string) {
    fs.readFile(path, (err, data) =&gt; {
      if (err) throw err;
      console.log(data);
      this.run(data.toString());
    });

    if (this.hadError) process.exit(65);
  }

  private async runPrompt() {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    while (true) {
      const line = await new Promise&lt;string&gt;(resolve =&gt; {
        rl.question(&apos;&gt; &apos;, resolve);
      });
      
      if (line === null) break;
      this.run(line);
      this.hadError = false;
    }

    rl.close();
  }

  private run(source: string) {
    const scanner = new Scanner(source);
    const tokens: Tokens[] = scanner.scanTokens();

    tokens.forEach(function (token) {
      console.log(token);
    });
  }

  error(line: number, message: string) {
    this.report(line, &quot;&quot;, message);
  }

  private report(line: number, where: string, message: string) {
    console.log(&quot;[line &quot; + line + &quot;] Error&quot; + where + &quot;: &quot; + message);
    this.hadError = true;
  }
}</file><file path="src/scanner.ts">import { Token, TokenType } from &quot;./token&quot;;

class Scanner {
  private source: string;
  private tokens: Token[];

  constructor(source: string){
    this.source = source;
    this.tokens = [];
  }

  scanTokens() {
    while(!isAtEnd()) {
      start = current;
      scanToken();
    }

    this.tokens.push(new Token(TokenType.EOF, &quot;&quot;, null, line));
    return tokens;
  }
}</file><file path="src/token.ts">export enum TokenType {
  LEFT_PAREN, RIGHT_PAREN, LEFT_BRACE, RIGHT_BRACE,
  COMMA, DOT, MINUS, PLUS, SEMICOLON, SLASH, STAR,
  BANG, BANG_EQUAL, EQUAL, EQUAL_EQUAL,
  GREATER, GREATER_EQUAL, LESS, LESS_EQUAL,
  IDENTIFIER, STRING, NUMBER,
  AND, CLASS, ELSE, FALSE, FUN, FOR, IF, NIL, OR,
  PRINT, RETURN, SUPER, THIS, TRUE, VAR, WHILE,
  EOF
}

export class Token {
  type: TokenType;
  lexeme: string;
  literal: Object;
  line: number;

  constructor(token: TokenType, lexeme: string, literal: Object, line: number) {
    this.type = token;
    this.lexeme = lexeme;
    this.literal = literal;
    this.line = line;
  }

  toString() {
    return this.type + &quot; &quot; + this.lexeme + &quot; &quot; + this.literal;
  }
}</file><file path=".gitignore"># Based on https://raw.githubusercontent.com/github/gitignore/main/Node.gitignore

# Logs

logs
_.log
npm-debug.log_
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Caches

.cache

# Diagnostic reports (https://nodejs.org/api/report.html)

report.[0-9]_.[0-9]_.[0-9]_.[0-9]_.json

# Runtime data

pids
_.pid
_.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover

lib-cov

# Coverage directory used by tools like istanbul

coverage
*.lcov

# nyc test coverage

.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)

.grunt

# Bower dependency directory (https://bower.io/)

bower_components

# node-waf configuration

.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)

build/Release

# Dependency directories

node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)

web_modules/

# TypeScript cache

*.tsbuildinfo

# Optional npm cache directory

.npm

# Optional eslint cache

.eslintcache

# Optional stylelint cache

.stylelintcache

# Microbundle cache

.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history

.node_repl_history

# Output of &apos;npm pack&apos;

*.tgz

# Yarn Integrity file

.yarn-integrity

# dotenv environment variable files

.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)

.parcel-cache

# Next.js build output

.next
out

# Nuxt.js build / generate output

.nuxt
dist

# Gatsby files

# Comment in the public line in if your project uses Gatsby and not Next.js

# https://nextjs.org/blog/next-9-1#public-directory-support

# public

# vuepress build output

.vuepress/dist

# vuepress v2.x temp and cache directory

.temp

# Docusaurus cache and generated files

.docusaurus

# Serverless directories

.serverless/

# FuseBox cache

.fusebox/

# DynamoDB Local files

.dynamodb/

# TernJS port file

.tern-port

# Stores VSCode versions used for testing VSCode extensions

.vscode-test

# yarn v2

.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# IntelliJ based IDEs
.idea

# Finder (MacOS) folder config
.DS_Store</file><file path="bun.lock">{
  &quot;lockfileVersion&quot;: 1,
  &quot;workspaces&quot;: {
    &quot;&quot;: {
      &quot;name&quot;: &quot;crafting-interpreters&quot;,
      &quot;devDependencies&quot;: {
        &quot;@types/bun&quot;: &quot;latest&quot;,
        &quot;@types/node&quot;: &quot;^22.13.4&quot;,
      },
      &quot;peerDependencies&quot;: {
        &quot;typescript&quot;: &quot;^5.7.3&quot;,
      },
    },
  },
  &quot;packages&quot;: {
    &quot;@types/bun&quot;: [&quot;@types/bun@1.2.2&quot;, &quot;&quot;, { &quot;dependencies&quot;: { &quot;bun-types&quot;: &quot;1.2.2&quot; } }, &quot;sha512-tr74gdku+AEDN5ergNiBnplr7hpDp3V1h7fqI2GcR/rsUaM39jpSeKH0TFibRvU0KwniRx5POgaYnaXbk0hU+w==&quot;],

    &quot;@types/node&quot;: [&quot;@types/node@22.13.4&quot;, &quot;&quot;, { &quot;dependencies&quot;: { &quot;undici-types&quot;: &quot;~6.20.0&quot; } }, &quot;sha512-ywP2X0DYtX3y08eFVx5fNIw7/uIv8hYUKgXoK8oayJlLnKcRfEYCxWMVE1XagUdVtCJlZT1AU4LXEABW+L1Peg==&quot;],

    &quot;@types/ws&quot;: [&quot;@types/ws@8.5.14&quot;, &quot;&quot;, { &quot;dependencies&quot;: { &quot;@types/node&quot;: &quot;*&quot; } }, &quot;sha512-bd/YFLW+URhBzMXurx7lWByOu+xzU9+kb3RboOteXYDfW+tr+JZa99OyNmPINEGB/ahzKrEuc8rcv4gnpJmxTw==&quot;],

    &quot;bun-types&quot;: [&quot;bun-types@1.2.2&quot;, &quot;&quot;, { &quot;dependencies&quot;: { &quot;@types/node&quot;: &quot;*&quot;, &quot;@types/ws&quot;: &quot;~8.5.10&quot; } }, &quot;sha512-RCbMH5elr9gjgDGDhkTTugA21XtJAy/9jkKe/G3WR2q17VPGhcquf9Sir6uay9iW+7P/BV0CAHA1XlHXMAVKHg==&quot;],

    &quot;typescript&quot;: [&quot;typescript@5.7.3&quot;, &quot;&quot;, { &quot;bin&quot;: { &quot;tsc&quot;: &quot;bin/tsc&quot;, &quot;tsserver&quot;: &quot;bin/tsserver&quot; } }, &quot;sha512-84MVSjMEHP+FQRPy3pX9sTVV/INIex71s9TL2Gm5FG/WG1SqXeKyZ0k7/blY/4FdOzI12CBy1vGc4og/eus0fw==&quot;],

    &quot;undici-types&quot;: [&quot;undici-types@6.20.0&quot;, &quot;&quot;, {}, &quot;sha512-Ny6QZ2Nju20vw1SRHe3d9jVu6gJ+4e3+MMpqu7pqE5HT6WsTSlce++GQmK5UXS8mzV8DSYHrQH+Xrf2jVcuKNg==&quot;],
  }
}</file><file path="package.json">{
  &quot;name&quot;: &quot;crafting-interpreters&quot;,
  &quot;module&quot;: &quot;index.ts&quot;,
  &quot;type&quot;: &quot;module&quot;,
  &quot;devDependencies&quot;: {
    &quot;@types/bun&quot;: &quot;latest&quot;,
    &quot;@types/node&quot;: &quot;^22.13.4&quot;
  },
  &quot;peerDependencies&quot;: {
    &quot;typescript&quot;: &quot;^5.7.3&quot;
  }
}</file><file path="README.md"># crafting-interpreters

To install dependencies:

```bash
bun install
```

To run:

```bash
bun run index.ts
```

This project was created using `bun init` in bun v1.2.1. [Bun](https://bun.sh) is a fast all-in-one JavaScript runtime.</file><file path="tsconfig.json">{
  &quot;compilerOptions&quot;: {
    // Enable latest features
    &quot;lib&quot;: [&quot;ESNext&quot;, &quot;DOM&quot;],
    &quot;target&quot;: &quot;ESNext&quot;,
    &quot;module&quot;: &quot;ESNext&quot;,
    &quot;moduleDetection&quot;: &quot;force&quot;,
    &quot;jsx&quot;: &quot;react-jsx&quot;,
    &quot;allowJs&quot;: true,

    // Bundler mode
    &quot;moduleResolution&quot;: &quot;bundler&quot;,
    &quot;allowImportingTsExtensions&quot;: true,
    &quot;verbatimModuleSyntax&quot;: true,
    &quot;noEmit&quot;: true,

    // Best practices
    &quot;strict&quot;: true,
    &quot;skipLibCheck&quot;: true,
    &quot;noFallthroughCasesInSwitch&quot;: true,

    // Some stricter flags (disabled by default)
    &quot;noUnusedLocals&quot;: false,
    &quot;noUnusedParameters&quot;: false,
    &quot;noPropertyAccessFromIndexSignature&quot;: false
  }
}</file></files></repomix>